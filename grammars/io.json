{
    "name": "Io",
    "scopeName": "source.io",
    "fileTypes": ["io"],
    "patterns": [
        {
            "captures": {
                "1": {
                    "name": "entity.name.function.io"
                },
                "2": {
                    "name": "keyword.operator.io"
                },
                "3": {
                    "name": "support.class.io"
                },
                "4": {
                    "name": "entity.name.function.io"
                }
            },
            "comment": "match stuff like: File := Object clone",
            "match": "\\b([A-Z_?.$][\\w?.$]*)\\s+(\\:=)\\s+([a-zA-Z_?.$][\\w?.$]*)\\s+(clone)",
            "name": "meta.object.io"
        },
        {
            "captures": {
                "1": {
                    "name": "entity.name.function.io"
                },
                "2": {
                    "name": "entity.name.function.io"
                }
            },
            "comment": "match stuff like: Person do( _ )",
            "match": "([a-zA-Z_?.$][\\w?.$]*)\\s+(do)",
            "name": "meta.object.do.io"
        },
        {
            "captures": {
                "1": {
                    "name": "support.class.io"
                },
                "2": {
                    "name": "entity.name.function.io"
                }
            },
            "comment": "match stuff like: Person clone",
            "match": "([A-Z_?.$][\\w?.$]*)\\s+(clone)",
            "name": "meta.object.clone.io"
        },
        {
            "captures": {
                "1": {
                    "name": "storage.type.function.io"
                },
                "2": {
                    "name": "keyword.operator.io"
                },
                "3": {
                    "name": "entity.name.function.io"
                }
            },
            "comment": "match stuff like: sum := method( _ )",
            "match": "([a-zA-Z_?.$][\\w?.$]*)\\s+(\\:=)\\s+(method)",
            "name": "meta.function.io"
        },
        {
            "captures":{
                "1": {
                    "name" : "keyword.control.io"
                }
            },
            "comment": "match keyword controls like: if, while( _ )",
            "match": "\\b(return|if|while|for)\\s*\\(",
            "name": "control.function.call.io"
        },
        {
            "captures":{
                "1": {
                    "name" : "entity.name.function.io"
                }
            },
            "comment": "match staff like: write( _ )",
            "match": "([a-zA-Z_?.$][\\w?.$]*)\\s*\\(",
            "name": "function.call.io"
        },
        {
            "match": "(?<!\\.)\\b(self|if|else|for|return|raise|try|while|yield)(?!\\s*:)\\b",
            "name": "keyword.control.io"
        },
        {
            "match" : "(clone)\\b",
            "name": "entity.name.function.io"
        },
        {
            "match": "!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?|\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\\^=",
            "name": "keyword.operator.io"
        },
        {
            "match": "\\b(Object|System|File|Sequence)\\b",
            "name": "support.class.io"
        },
        {
            "match": "(?<!\\.)\\btrue(?!\\s*:)\\b",
            "name": "constant.language.boolean.true.io"
        },
        {
            "match": "(?<!\\.)\\bfalse(?!\\s*:)\\b",
            "name": "constant.language.boolean.false.io"
        },
        {
            "match": "(?<!\\.)\\bnil(?!\\s*:)\\b",
            "name": "constant.language.nil.io"
        },
        {
            "match": "\\[|\\]",
            "name": "meta.brace.square.io"
        },
        {
            "match": ",",
            "name": "meta.delimiter.object.comma.io"
        },
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?)((e|E)[+-]?[0-9]+)?)\\b",
            "name": "constant.numeric.io"
        },
        {
          "begin": "/\\*\\*(?!/)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.io"
            }
          },
          "end": "\\*/",
          "name": "comment.block.documentation.io"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.io"
            }
          },
          "end": "\\*/",
          "name": "comment.block.io"
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.io"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.io"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-slash.io"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.ruby"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.ruby"
                }
              },
              "end": "\\n",
              "name": "comment.line.number-sign.ruby"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.io"
            }
          },
          "comment": "string literal with interpolation and \"\" delimitor",
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.io"
            }
          },
          "name": "string.quoted.double.interpolated.io",
          "patterns": [
              {
                  "include": "#interpolated_io"
              },
              {
                  "include": "#escaped_char"
              }
          ]
        }

    ],
    "repository": {
        "escaped_char": {
          "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
          "name": "constant.character.escape.io"
        },
        "interpolated_io": {
            "patterns": [
                {
                    "begin": "(#\\{)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.section.embedded.begin.io"
                        },
                        "1": {
                          "name": "source.io"
                        }
                    },
                    "contentName": "source.io",
                    "end": "(\\})",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.embedded.end.io"
                        },
                        "1": {
                          "name": "source.io"
                        }
                    }
                }
            ]
        }
    }
}
